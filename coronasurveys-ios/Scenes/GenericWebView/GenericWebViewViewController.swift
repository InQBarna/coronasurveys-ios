//
//  GenericWebViewViewController.swift
//  edenred-iphone
//
//  Created by Josep Bordes Jov√© on 21/05/2019.
//  Copyright (c) 2019 Inqbarna. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SafariServices
import UIKit
import WebKit
protocol GenericWebViewDisplayLogic: AnyObject {
    func displayWebView(viewModel: GenericWebView.PrepareWebView.ViewModel)
}

class GenericWebViewViewController: UIViewController, GenericWebViewDisplayLogic, AutoUpdateContext {
    var interactor: GenericWebViewBusinessLogic?
    var router: (NSObjectProtocol & GenericWebViewRoutingLogic & GenericWebViewDataPassing)?

    let prefsWorker = PreferencesWorker(store: PreferencesStore())

    // MARK: AutoUpdateContext

    var childrenViewControllers: [UIViewController]? {
        nil
    }

    var context: [Dependency: Any?]? {
        get {
            router?.dataStore?.context
        }
        set {
            var dataStore = router!.dataStore!
            dataStore.context = newValue
        }
    }

    // MARK: View

    lazy var genericWebViewView: GenericWebViewView = {
        let view = GenericWebViewView()
        view.delegate = self
        view.setupSurveyFinishedScriptForVC(self)
        return view
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = GenericWebViewInteractor()
        let presenter = GenericWebViewPresenter()
        let router = GenericWebViewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func loadView() {
        super.loadView()
        view = genericWebViewView
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        prepareWebView()
    }

    // MARK: Setup methods

    func setupNavigationBar() {
        title = L10N.survey
        navigationController?.navigationBar.tintColor = Color.black

        let leftBarButtonItem = UIBarButtonItem(image: Icon.xmark, style: .plain, target: self, action: #selector(dismissViewController))
        navigationItem.leftBarButtonItem = leftBarButtonItem
    }

    // MARK: Prepare view

    @objc func prepareWebView(objcUrl: String? = nil, shouldReloadProducts: Bool = false) {
        genericWebViewView.updateState(new: .loading)
        let request = GenericWebView.PrepareWebView.Request(shouldReloadProducts: shouldReloadProducts)
        interactor?.prepareWebView(request: request)
    }

    func displayWebView(viewModel: GenericWebView.PrepareWebView.ViewModel) {
        let genericWebViewViewVM = GenericWebViewViewVM(url: viewModel.url)
        genericWebViewView.display(viewModel: genericWebViewViewVM)
    }

    // MARK: Helpers

    @objc private func dismissViewController() {
        dismiss(animated: true, completion: nil)
    }

    private func goToSettings() {
        guard let settingsUrl = URL(string: UIApplication.openSettingsURLString) else {
            return
        }

        if UIApplication.shared.canOpenURL(settingsUrl) {
            UIApplication.shared.open(settingsUrl, completionHandler: nil)
        }
    }
}

extension GenericWebViewViewController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        genericWebViewView.updateState(new: .loading)
    }

    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        genericWebViewView.updateState(new: .loaded)
    }

    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        print("üåè URL: \(navigationAction.request.url?.absoluteString ?? "no-url")")

        if let language = navigationAction.request.url?.queryValue(for: "lang") {
            interactor?.saveLanguage(language)
        }

        if navigationAction.navigationType == .linkActivated {
            genericWebViewView.updateState(new: .loaded)
            let url = navigationAction.request.url

            if url?.pathExtension == "ics" {
                router?.routeToEndForm()
                decisionHandler(.cancel)
            } else if url?.absoluteString.contains("survey.coronasurveys.org") == true {
                decisionHandler(.allow)
            } else if url?.scheme == "http" || url?.scheme == "https" {
                decisionHandler(.cancel)
                if let url = navigationAction.request.url {
                    let vc = SFSafariViewController(url: url, entersReaderIfAvailable: true)
                    present(vc, animated: true)
                }
            } else {
                decisionHandler(.cancel)
                if let url = url {
                    UIApplication.shared.open(url, options: [:], completionHandler: nil)
                }
            }
        } else {
            decisionHandler(.allow)
        }
    }
}

extension GenericWebViewViewController: WKScriptMessageHandler {
    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
        prefsWorker.notificationsAuthStatus { status in
            if status != .denied {
                self.prefsWorker.hasScheduledNotification { hasScheduledNotification in
                    if !hasScheduledNotification {
                        self.router?.routeToEndForm()
                    }
                }
            } else {
                let settingsAction = UIAlertAction(title: L10N.goToSettings, style: .default) { _ in
                    self.goToSettings()
                }
                let cancelAction = UIAlertAction(title: L10N.cancel, style: .cancel)

                let alertController = UIAlertController(title: L10N.enableNotificationsAlertTitle,
                                                        message: L10N.enableNotificationsAlertText, preferredStyle: .alert)

                alertController.addAction(settingsAction)
                alertController.addAction(cancelAction)

                self.present(alertController, animated: true, completion: nil)
            }
        }
    }
}
