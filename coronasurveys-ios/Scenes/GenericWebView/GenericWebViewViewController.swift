//
//  GenericWebViewViewController.swift
//  edenred-iphone
//
//  Created by Josep Bordes Jové on 21/05/2019.
//  Copyright (c) 2019 Inqbarna. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SafariServices
import UIKit
import WebKit
protocol GenericWebViewDisplayLogic: AnyObject {
    func displayWebView(viewModel: GenericWebView.PrepareWebView.ViewModel)
}

class GenericWebViewViewController: UIViewController, GenericWebViewDisplayLogic, AutoUpdateContext {
    var interactor: GenericWebViewBusinessLogic?
    var router: (NSObjectProtocol & GenericWebViewRoutingLogic & GenericWebViewDataPassing)?

    // MARK: AutoUpdateContext

    var childrenViewControllers: [UIViewController]? {
        nil
    }

    var context: [Dependency: Any?]? {
        get {
            router?.dataStore?.context
        }
        set {
            var dataStore = router!.dataStore!
            dataStore.context = newValue
        }
    }

    // MARK: View

    lazy var genericWebViewView: GenericWebViewView = {
        let view = GenericWebViewView()
        view.delegate = self
        return view
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = GenericWebViewInteractor()
        let presenter = GenericWebViewPresenter()
        let router = GenericWebViewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func loadView() {
        super.loadView()
        view = genericWebViewView
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        prepareWebView()
    }

    // MARK: Setup methods

    func setupNavigationBar() {
        title = L10N.survey
        navigationController?.navigationBar.tintColor = Color.black

        let leftBarButtonItem = UIBarButtonItem(image: Icon.xmark, style: .plain, target: self, action: #selector(dismissViewController))
        navigationItem.leftBarButtonItem = leftBarButtonItem
    }

    // MARK: Prepare view

    @objc func prepareWebView(objcUrl: String? = nil, shouldReloadProducts: Bool = false) {
        genericWebViewView.updateState(new: .loading)
        let request = GenericWebView.PrepareWebView.Request(shouldReloadProducts: shouldReloadProducts)
        interactor?.prepareWebView(request: request)
    }

    func displayWebView(viewModel: GenericWebView.PrepareWebView.ViewModel) {
        let genericWebViewViewVM = GenericWebViewViewVM(url: viewModel.url)
        genericWebViewView.display(viewModel: genericWebViewViewVM)
    }

    // MARK: Helpers

    @objc private func dismissViewController() {
        dismiss(animated: true, completion: nil)
    }
}

extension GenericWebViewViewController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        genericWebViewView.updateState(new: .loading)
    }

    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        genericWebViewView.updateState(new: .loaded)
    }

    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        print("🌏 URL: \(navigationAction.request.url?.absoluteString ?? "no-url")")

        if let language = navigationAction.request.url?.queryDictionary?["lang"] {
            interactor?.saveLanguage(language)
        }

        if navigationAction.navigationType == .linkActivated {
            genericWebViewView.updateState(new: .loaded)
            let url = navigationAction.request.url

            if url?.pathExtension == "ics" {
                router?.routeToEndForm()
                decisionHandler(.cancel)
            } else if url?.absoluteString.contains("survey.coronasurveys.org") == true {
                decisionHandler(.allow)
            } else if url?.scheme == "http" || url?.scheme == "https" {
                decisionHandler(.cancel)
                if let url = navigationAction.request.url {
                    let vc = SFSafariViewController(url: url, entersReaderIfAvailable: true)
                    present(vc, animated: true)
                }
            } else {
                decisionHandler(.cancel)
                if let url = url {
                    UIApplication.shared.open(url, options: [:], completionHandler: nil)
                }
            }
        } else {
            decisionHandler(.allow)
        }
    }

    // MARK: Helpers

    private func containsUrl(callbackUrlString: String, acceptedUrls: [String]) -> Bool {
        acceptedUrls.contains { acceptedUrl in
            guard let url = URL(string: acceptedUrl) else { return false }
            guard let callbackUrl = URL(string: callbackUrlString) else { return false }

            return url.path.lowercased() == callbackUrl.path.lowercased() && callbackUrl.host?.lowercased() == url.host?.lowercased()
        }
    }
}
