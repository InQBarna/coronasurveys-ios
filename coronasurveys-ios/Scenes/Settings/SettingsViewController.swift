//
//  SettingsViewController.swift
//  coronasurveys-ios
//
//  Created by Josep Bordes Jov√© on 18/05/2020.
//  Copyright (c) 2020 Inqbarna. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: AnyObject {
    func displayView(viewModel: Settings.PrepareView.ViewModel)
    func displayToggleNotification(viewModel: Settings.ToggleNotification.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic {
    var interactor: SettingsBusinessLogic?
    var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?

    // MARK: View

    private lazy var settingsView: SettingsView = {
        let view = SettingsView()
        view.delegate = self
        return view
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SettingsInteractor()
        let presenter = SettingsPresenter()
        let router = SettingsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func loadView() {
        super.loadView()
        view = settingsView
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        prepareView()
    }

    // MARK: Setup methods

    func setupNavigationBar() {
        navigationController?.navigationBar.tintColor = Color.black

        let leftBarButtonItem = UIBarButtonItem(image: Icon.xmark, style: .plain, target: self, action: #selector(dismissViewController))
        navigationItem.leftBarButtonItem = leftBarButtonItem
    }

    // MARK: Prepare view

    func prepareView() {
        let request = Settings.PrepareView.Request()
        interactor?.prepareView(request: request)
    }

    func displayView(viewModel: Settings.PrepareView.ViewModel) {
        title = viewModel.title

        let settingsViewVM = SettingsViewVM(sections: viewModel.sections)
        settingsView.display(viewModel: settingsViewVM)
    }

    private func toggleNotification(newValue: Bool) {
        let request = Settings.ToggleNotification.Request(newValue: newValue)
        interactor?.toggleNotification(request: request)
    }

    func displayToggleNotification(viewModel: Settings.ToggleNotification.ViewModel) {
        let settingsViewVM = SettingsViewVM(sections: viewModel.sections)
        settingsView.display(viewModel: settingsViewVM)
    }

    // MARK: Helpers

    @objc private func dismissViewController() {
        dismiss(animated: true, completion: nil)
    }
}

extension SettingsViewController: SettingsViewDelegate {
    func didUpdateNotifications(_ uiSwitch: UISwitch) {
        toggleNotification(newValue: uiSwitch.isOn)
    }
}
