//
//  EndFormViewController.swift
//  coronasurveys-ios
//
//  Created by Josep Bordes JovÃ© on 18/05/2020.
//  Copyright (c) 2020 Inqbarna. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EndFormDisplayLogic: AnyObject {
    func displayView(viewModel: EndForm.PrepareView.ViewModel)
    func displayScheduleNotification(viewModel: EndForm.ScheduleNotification.ViewModel)
}

class EndFormViewController: UIViewController, EndFormDisplayLogic, AutoUpdateContext, ModalViewController {
    var interactor: EndFormBusinessLogic?
    var router: (NSObjectProtocol & EndFormRoutingLogic & EndFormDataPassing)?

    // MARK: ModalViewController

    var containerViewGetter: UIView {
        endFormView
    }

    var backgroundViewGetter: UIView {
        dimBackgroundView
    }

    // MARK: AutoUpdateContext

    var childrenViewControllers: [UIViewController]? {
        nil
    }

    var context: [Dependency: Any?]? {
        get {
            router?.dataStore?.context
        }
        set {
            var dataStore = router!.dataStore!
            dataStore.context = newValue
        }
    }

    // MARK: UI

    private lazy var dimBackgroundView: UIView = {
        let view = UIView()
        view.alpha = 0.5
        view.backgroundColor = .black
        view.translatesAutoresizingMaskIntoConstraints = false

        return view
    }()

    private lazy var endFormView: EndFormView = {
        let view = EndFormView()
        view.delegate = self
        return view
    }()

    // MARK: Gestures

    private lazy var tapGesture: UITapGestureRecognizer = {
        let tapGesture = UITapGestureRecognizer()
        tapGesture.numberOfTapsRequired = 1
        tapGesture.addTarget(self, action: #selector(dismissViewController))

        return tapGesture
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = EndFormInteractor()
        let presenter = EndFormPresenter()
        let router = EndFormRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor

        modalPresentationStyle = .overFullScreen
        transitioningDelegate = self
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        setupView()
        setupConstraints()

        prepareView()
    }

    // MARK: Setup methods

    private func setupView() {
        view.backgroundColor = .clear
        dimBackgroundView.addGestureRecognizer(tapGesture)
        [dimBackgroundView, endFormView].forEach { view.addSubview($0) }
    }

    private func setupConstraints() {
        NSLayoutConstraint.activate([
            dimBackgroundView.topAnchor.constraint(equalTo: view.topAnchor),
            dimBackgroundView.leftAnchor.constraint(equalTo: view.leftAnchor),
            dimBackgroundView.rightAnchor.constraint(equalTo: view.rightAnchor),
            dimBackgroundView.bottomAnchor.constraint(equalTo: view.bottomAnchor),

            endFormView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            endFormView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            endFormView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8)
        ])
    }

    // MARK: Prepare view

    func prepareView() {
        let request = EndForm.PrepareView.Request()
        interactor?.prepareView(request: request)
    }

    func displayView(viewModel: EndForm.PrepareView.ViewModel) {
        // nameTextField.text = viewModel.name
    }

    // MARK: Schedule notification

    private func scheduleNotification(interval: NotificationInterval) {
        let center = UNUserNotificationCenter.current()
        center.requestAuthorization(options: [.alert]) { granted, error in
            if granted, error == nil {
                DispatchQueue.main.async {
                    let request = EndForm.ScheduleNotification.Request(interval: interval)
                    self.interactor?.scheduleNotification(request: request)
                }
            }
        }
    }

    func displayScheduleNotification(viewModel: EndForm.ScheduleNotification.ViewModel) {
        dismissViewController()
    }

    // MARK: Helpers

    @objc private func dismissViewController() {
        dismiss(animated: true, completion: nil)
    }
}

// MARK: UIViewControllerTransitioningDelegate

extension EndFormViewController: UIViewControllerTransitioningDelegate {
    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        ModalDismissal<EndFormViewController>()
    }

    func animationController(
        forPresented presented: UIViewController,
        presenting: UIViewController,
        source: UIViewController
    ) -> UIViewControllerAnimatedTransitioning? {
        ModalPresentation<EndFormViewController>()
    }
}

// MARK: EndFormViewDelegate

extension EndFormViewController: EndFormViewDelegate {
    func dailyNotifications() {
        scheduleNotification(interval: .daily)
    }

    func weeklyNotifications() {
        scheduleNotification(interval: .weekly)
    }

    func noNotifications() {
        dismissViewController()
    }
}
